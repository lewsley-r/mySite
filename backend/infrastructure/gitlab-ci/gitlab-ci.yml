image: docker:latest

variables:
  CONTAINER_NGINX_IMAGE: $CI_REGISTRY_IMAGE:nginx-$CI_PIPELINE_ID
  CONTAINER_NGINX_PIPELINE_IMAGE: $ECR_URI:nginx-$CI_PIPELINE_ID
  CONTAINER_NGINX_RELEASE_IMAGE: $ECR_URI:nginx-latest

  CONTAINER_PHPFPM_IMAGE: $CI_REGISTRY_IMAGE:phpfpm-$CI_PIPELINE_ID
  CONTAINER_PHPFPM_PIPELINE_IMAGE: $ECR_URI:phpfpm-$CI_PIPELINE_ID
  CONTAINER_PHPFPM_RELEASE_IMAGE: $ECR_URI:phpfpm-latest
  COMPOSER_CACHE_DIR: /cache
  DOCKER_DRIVER: overlay

stages:
# - meld
- composer
- build
- test
- release
- deploy

services:
- docker:dind

before_script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com

#meld:
#  stage: meld
#  image: alpine
#  before_script:
#  - echo "Pulling in latest front end build to the project. Usually the index.html. asset served from S3 buckets"
#  script:
#  - wget "https://gitlab.com/api/v4/projects/$FRONTEND_GITLAB_PROJECT_ID/jobs/artifacts/master/download?job=release&private_token=$FRONTEND_GITLAB_TOKEN" -O frontend-build.zip
#  artifacts:
#    paths:
#      - frontend-build.zip

composer:
  stage: composer
  before_script:
  - echo "Building PHP dependencies"
  image: composer
  script:
  - composer install --ignore-platform-reqs
  artifacts:
    paths:
    - vendor
    - bootstrap/cache
    - bootstrap/autoload.php
    - composer.lock

build:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
  # First we build using an image we will have to download anyway
  - chown -R 33 storage/logs bootstrap/cache
  - docker run -e COMPOSER_CACHE_DIR="$COMPOSER_CACHE_DIR" --volumes-from $HOSTNAME-build -w `pwd` composer install
  - docker build -f infrastructure/containers/nginx/Dockerfile -t $CONTAINER_NGINX_IMAGE .
  - docker build -f infrastructure/containers/phpfpm/Dockerfile -t $CONTAINER_PHPFPM_IMAGE .
  - docker push $CONTAINER_NGINX_IMAGE
  - docker push $CONTAINER_PHPFPM_IMAGE
  dependencies:
  # - meld
  - composer

test:
  stage: test
  script:
  - docker run -t $CONTAINER_PHPFPM_IMAGE sh -c "curl -L -o phpunit https://phar.phpunit.de/phpunit-7.2.phar && chmod +x phpunit && ./phpunit"
  - docker run -t $CONTAINER_PHPFPM_IMAGE sh -c "curl -L -o behat https://github.com/Behat/Behat/releases/download/v3.3.0/behat.phar && chmod +x behat && ./behat"
  # - docker run --entrypoint vendor/behat/behat/bin/behat $CONTAINER_PHPFPM_IMAGE
  dependencies: []

release:
  stage: release
  script:
  # NGINX
  - docker pull $CONTAINER_NGINX_IMAGE
  - docker tag $CONTAINER_NGINX_IMAGE $CONTAINER_NGINX_RELEASE_IMAGE
  - docker tag $CONTAINER_NGINX_RELEASE_IMAGE $CONTAINER_NGINX_PIPELINE_IMAGE
  # PHPFPM
  - docker pull $CONTAINER_PHPFPM_IMAGE
  - docker tag $CONTAINER_PHPFPM_IMAGE $CONTAINER_PHPFPM_RELEASE_IMAGE
  - docker tag $CONTAINER_PHPFPM_RELEASE_IMAGE $CONTAINER_PHPFPM_PIPELINE_IMAGE
  #- docker run -t -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION garland/aws-cli-docker aws ecr get-login
  #- eval "$(echo $(docker run -t -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION garland/aws-cli-docker aws ecr get-login) | sed 's/\r$//' | sed 's/-e \S*//g')"
  # push images to the container registry
  - docker push $CONTAINER_NGINX_PIPELINE_IMAGE
  - docker push $CONTAINER_NGINX_RELEASE_IMAGE
  - docker push $CONTAINER_PHPFPM_PIPELINE_IMAGE
  - docker push $CONTAINER_PHPFPM_RELEASE_IMAGE
  only:
  - master
  - development
  dependencies: []

# WARNING: Prefer using --context=$CI_PROJECT_ID else concurrent builds may fail.
deploy_dev:
  image: google/cloud-sdk:162.0.0
  before_script:
  # In gitlab operation -> kubernetes needs to be setup for this to work so you get the KUBE variables
  - kubectl config set-cluster "$CI_PROJECT_ID" --server="$KUBE_URL" --certificate-authority="$KUBE_CA_PEM_FILE"
  - kubectl config set-credentials "$CI_PROJECT_ID" --token="$KUBE_TOKEN"
  - kubectl config set-context "$CI_PROJECT_ID" --cluster="$CI_PROJECT_ID" --user="$CI_PROJECT_ID" --namespace="$KUBE_NAMESPACE"
  - kubectl config use-context "$CI_PROJECT_ID"
  stage: deploy
  script:
  - >-
    kubectl patch cronjob.v2alpha1.batch $CI_ENVIRONMENT_SLUG-laravel-artisan
      -p "{
        \"spec\": {
          \"jobTemplate\": {
            \"spec\": {
              \"template\": {
                \"spec\": {
                  \"containers\": [
                    {
                      \"name\": \"$CI_ENVIRONMENT_SLUG-laravel-scheduler\",
                      \"image\": \"$ECR_URI:phpfpm-$CI_PIPELINE_ID\"
                    }
                  ]
                }
              }
            }
          }
        }
      }"
  - kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-artisan laravel-artisan-worker=$CONTAINER_PHPFPM_PIPELINE_IMAGE
  - kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-nginx nginx=$CONTAINER_NGINX_PIPELINE_IMAGE
  - kubectl set image deployment/$CI_ENVIRONMENT_SLUG-laravel-phpfpm laravel-phpfpm=$CONTAINER_PHPFPM_PIPELINE_IMAGE
  environment:
    name: dev
    url: http://$CI_ENVIRONMENT_SLUG.$CI_TARGET_DOMAIN
  only:
  - development
  dependencies: []
